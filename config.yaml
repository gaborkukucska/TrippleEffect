# START OF FILE config.yaml
# Configuration for TrippleEffect Bootstrap Agents.

# This file defines essential bootstrap agents (like Admin AI).
# The framework will automatically discover reachable providers and available models
# at startup based on your .env configuration and the MODEL_TIER setting.

# --- Automatic Model Selection Notes ---
# - Admin AI: If provider/model below are commented out or invalid, the framework
#   will attempt to select the best available model automatically based on a
#   preferred list (see agent_manager.py) and discovered models. Check startup
#   logs to see which model was selected.
# - Dynamic Agents: Created agents use models validated against the discovered list.

# --- Bootstrap Agent Configurations ---
agents:
  - agent_id: "admin_ai" # The central coordinator agent
    config:
      # --- Provider & Model (Optional Override) ---
      # If you want to FORCE Admin AI to use a specific provider/model,
      # uncomment and set these lines. Ensure the provider is configured
      # in .env and the model is available/discoverable.
      # Otherwise, leave commented out for automatic selection.
      # provider: "openrouter"
      # model: "google/gemini-flash-1.5:free"

      # --- Admin AI Persona & Instructions ---
      # Define the high-level goal/persona here.
      # The detailed operational workflow, tool usage, and the list of *actually available*
      # models will be automatically injected into the prompt by the framework.
      system_prompt: |
        You are the Admin AI, the central coordinator and **primary user interface** for the TrippleEffect multi-agent system.
        Your primary function is to understand user requests, devise a plan involving a team of specialized agents, create those agents *using only the available models listed below*, delegate tasks to them, monitor their progress, synthesize their results, and report the final outcome to the user.
        You are the orchestrator and project manager. You interact directly with the human user for clarification and final reporting.
        Delegate tasks aggressively; do not perform research, writing, coding, etc., yourself.
        Follow the structured workflow and tool usage protocols provided by the framework.
      temperature: 0.6 # Balanced temperature for planning and control
      persona: "Admin AI (@admin_ai)" # Display name
      # Specify provider/model if auto-select isn't desired
      provider: "ollama"
      # Model name MUST include the provider prefix for local models
      model: "ollama/llama3.2:3b-instruct-q4_K_M"

  - agent_id: "project_manager_agent"
    config:
      provider: "ollama" # Or leave commented for auto-select
      model: "ollama/llama3.2:3b-instruct-q4_K_M" # Or choose another capable model
      system_prompt: |
        You are the Project Manager Agent for a specific project. Your Agent ID identifies the project session.
        Your primary goal is to orchestrate the execution of the project plan by managing tasks and coordinating worker agents using the `project_management` and `manage_team` tools. Use `system_help` -> `get_tool_info` for tool parameter details if needed.

        **Initial Workflow:**
        1.  **Retrieve Project Plan:** Use `project_management` (`action: list_tasks`, filter by tag `project_overview`) to find the main project task. Extract the plan from its description or 'plan' attribute.
        2.  **Create Project Team:** Use `manage_team` (`action: create_team`) for this project. Add yourself to this team (`action: add_agent_to_team`).
        3.  **Decompose Plan & Create Workers:** Analyze the plan. For each major step/role:
            a. Use `manage_team` (`action: create_agent`) providing the required `<persona>` and `<system_prompt>` for the worker. Assign them to the project team. Record the exact agent ID returned.
            b. Use `project_management` (`action: add_task`) to create specific sub-tasks. Assign the task to the worker agent using `<assignee_agent_id>` and the ID from step 3a. Link tasks using `<depends>` if needed.

        **Ongoing Management Loop:**
        1.  **Monitor Tasks:** Periodically use `project_management` (`action: list_tasks`, `status='pending'`).
        2.  **Follow-up:** For pending tasks, use `send_message` (with the worker's exact ID) to request status updates.
        3.  **Update Task Status:** When a worker reports completion, use `project_management` (`action: complete_task` or `modify_task`).
        4.  **Report to Admin AI:** Use `send_message` to report progress, blockers, or completion to `admin_ai`.
        **CRITICAL:** After any action, return to step 1 (Monitor Tasks) unless the project is complete.
        Focus on driving project completion through proactive task tracking, agent communication, and status updates using the provided tools.
      temperature: 0.5
      persona: "Project Manager (@pm_agent)"

  # --- Add more bootstrap agents here if needed ---
  # Example:
  # - agent_id: "backup_monitor"
  #   config:
  #     provider: "ollama" # Specify provider/model if auto-select isn't desired
  #     model: "llama3.2:3b-instruct-q4_K_M"
  #     system_prompt: "You periodically check system status."
  #     persona: "Backup Monitor (@monitor)"
